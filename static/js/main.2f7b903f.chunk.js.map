{"version":3,"sources":["Method1.js","Method2.js","Method3.js","App.js","serviceWorker.js","index.js"],"names":["Method1","useState","theory","setTheory","partical","setPartical","result","setResult","className","onChange","e","target","value","type","placeholder","onClick","sum","console","log","Method2","setValue","square2","Method3","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f7b903f.chunk.js","sourcesContent":["import React,{ useState }from 'react'\r\n\r\nexport default function Method1() {\r\n    const [theory, setTheory] = useState(0);\r\n    const [partical, setPartical] = useState(0);\r\n    const [result, setResult] = useState(0);\r\n    const theoryOnChange = (e) => {\r\n      setTheory(e.target.value);\r\n    };\r\n    const particalOnChange = (e) => {\r\n      setPartical(e.target.value);\r\n    };\r\n    const calcFistMethod = () => {\r\n      const square = partical * 3\r\n      const sum = +theory + square ;\r\n      console.log(theory); \r\n      const devide = sum / 4\r\n      \r\n      const score = devide / 5;\r\n      setResult(score);\r\n    };\r\n    return (\r\n      <div className='middleElements'>\r\n        <div className='card bg-light'>\r\n          <div className='card-body'>\r\n          <h5 className=\"title\">محاسبه نمره بر اساس  نمره عملی و نمره تئوری</h5>\r\n\r\n              <div className='row'>\r\n                <div className='col'>\r\n                  <input\r\n                    onChange={theoryOnChange}\r\n                    type='number'\r\n                    className='form-control'\r\n                    placeholder='نمره نظری'\r\n                  />\r\n                </div>\r\n                <div className='col'>\r\n                  <input\r\n                    onChange={particalOnChange}\r\n                    type='number'\r\n                    className='form-control'\r\n                    placeholder='نمره عملی'\r\n                  />\r\n                </div>\r\n                <div className='col'>\r\n                  <button onClick={calcFistMethod} className='btn btn-primary'>\r\n                    محاسبه\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <h5 className='result'>نمره نهایی: {result}</h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React,{ useState }from 'react'\r\n\r\nexport default function Method2() {\r\n    const [theory, setTheory] = useState(0);\r\n    const [value, setValue] = useState(0);\r\n    const [result, setResult] = useState(0);\r\n    const theoryOnChange = (e) => {\r\n      setTheory(e.target.value);\r\n    };\r\n    const valueOnChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n    const calcFistMethod = () => {\r\n        const square1 = value * 5;\r\n        \r\n        const square2 = square1 * 4 ;\r\n        console.log(square2);\r\n      const Subtraction = square2 -  +theory\r\n      \r\n      const score = Subtraction / 3;\r\n      setResult(score);\r\n    };\r\n    return (\r\n        <div className='middleElements'>\r\n        <div className='card bg-light'>\r\n          <div className='card-body'>\r\n                        <h5 className=\"title\">محاسبه نمره بر اساس  نمره دلخواه و نمره تئوری</h5>\r\n                    <div className='row'>\r\n                    <div className='col'>\r\n                  <input\r\n                    onChange={valueOnChange}\r\n                    type='number'\r\n                    className='form-control'\r\n                    placeholder='نمره دلخواه'\r\n                  />\r\n                </div>\r\n                <div className='col'>\r\n                  <input\r\n                    onChange={theoryOnChange}\r\n                    type='number'\r\n                    className='form-control'\r\n                    placeholder='نمره نظری'\r\n                  />\r\n                </div>\r\n            \r\n                <div className='col'>\r\n                  <button onClick={calcFistMethod} className='btn btn-primary'>\r\n                    محاسبه عملی\r\n                  </button>\r\n                </div>\r\n              </div>\r\n             <h5 className='result'>نمره عملی: {result}</h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React,{ useState }from 'react'\r\n\r\nexport default function Method3() {\r\n    const [theory, setTheory] = useState(0);\r\n    const [value, setValue] = useState(0);\r\n    const [result, setResult] = useState(0);\r\n    const theoryOnChange = (e) => {\r\n      setTheory(e.target.value);\r\n    };\r\n    const valueOnChange = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n    const calcFistMethod = () => {\r\n        const square1 = value * 5;\r\n        \r\n        const square2 = square1 * 4 ;\r\n      const Subtraction = +theory *  3\r\n      \r\n      const score = square2 - Subtraction ;\r\n      setResult(score);\r\n    };\r\n    return (\r\n        <div className='middleElements'>\r\n        <div className='card bg-light'>\r\n          <div className='card-body'>\r\n                        <h5 className=\"title\">محاسبه نمره بر اساس  نمره دلخواه و نمره نظری</h5>\r\n                    <div className='row'>\r\n                    <div className='col'>\r\n                  <input\r\n                    onChange={valueOnChange}\r\n                    type='number'\r\n                    className='form-control'\r\n                    placeholder='نمره دلخواه'\r\n                  />\r\n                </div>\r\n                <div className='col'>\r\n                  <input\r\n                    onChange={theoryOnChange}\r\n                    type='number'\r\n                    className='form-control'\r\n                    placeholder='نمره عملی'\r\n                  />\r\n                </div>\r\n              \r\n                <div className='col'>\r\n                  <button onClick={calcFistMethod} className='btn btn-primary'>\r\n                      محاسبه نظری\r\n                  </button>\r\n                </div>\r\n              </div>\r\n             <h5 className='result'>نمره نظری: {result}</h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Method1 from \"./Method1\";\nimport Method2 from \"./Method2\";\nimport Method3 from \"./Method3\";\n\nfunction App() {\n \n\n  return (\n    <div className='App'>\n      <Method1 />\n      <div className=\"twoMethods\">\n        <Method2 />\n        <Method3 />\n      </div>\n<h6>بهار 1399 - سجاد ناصری زاده - 09166505841</h6>      \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}